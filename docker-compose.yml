services:
  # Django Backend
  backend:
    build: ./back-end
    container_name: grc-backend
    ports:
      - "8000:8000"
    volumes:
      - ./back-end:/app
      - backend_media:/app/media
      - backend_static:/app/static
    environment:
      - DEBUG=1
      - DJANGO_SETTINGS_MODULE=grc_project.settings
    networks:
      - grc-network
    restart: unless-stopped

  # React Frontend
  frontend:
    build: ./front-end
    container_name: grc-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - grc-network
    restart: unless-stopped

  # Unified Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: grc-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
      - mobsf
    networks:
      - grc-network
    restart: unless-stopped

  # MobSF (Mobile Security Framework)
  mobsf:
    image: opensecurity/mobile-security-framework-mobsf:latest
    container_name: mobsf
    ports:
      - "8001:8000"
    volumes:
      - mobsf_data:/home/mobsf/.MobSF
    networks:
      - grc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  compliance_redis:
    image: redis:7-alpine
    container_name: compliance_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - grc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  compliance_postgres:
    image: postgres:15-alpine
    container_name: compliance_postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: compliance_db
      POSTGRES_USER: compliance_user
      POSTGRES_PASSWORD: compliance_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - grc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U compliance_user -d compliance_db"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  backend_media:
  backend_static:
  mobsf_data:
  redis_data:
  postgres_data:

networks:
  grc-network:
    driver: bridge
